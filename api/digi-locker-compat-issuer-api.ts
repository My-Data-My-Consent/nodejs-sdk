/* tslint:disable */
/* eslint-disable */
/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProblemDetails } from '../models';
// @ts-ignore
import { PushUriRequest } from '../models';
// @ts-ignore
import { PushUriResponse } from '../models';
/**
 * DigiLockerCompatIssuerApi - axios parameter creator
 * @export
 */
export const DigiLockerCompatIssuerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Digilocker Compatible endpoint to Issue Documents.
         * @param {PushUriRequest} [pushUriRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuerIssuedoc1XmlPost: async (pushUriRequest?: PushUriRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/issuer/issuedoc/1/xml`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/xml';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pushUriRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DigiLockerCompatIssuerApi - functional programming interface
 * @export
 */
export const DigiLockerCompatIssuerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DigiLockerCompatIssuerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Digilocker Compatible endpoint to Issue Documents.
         * @param {PushUriRequest} [pushUriRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issuerIssuedoc1XmlPost(pushUriRequest?: PushUriRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushUriResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issuerIssuedoc1XmlPost(pushUriRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DigiLockerCompatIssuerApi - factory interface
 * @export
 */
export const DigiLockerCompatIssuerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DigiLockerCompatIssuerApiFp(configuration)
    return {
        /**
         * 
         * @summary Digilocker Compatible endpoint to Issue Documents.
         * @param {PushUriRequest} [pushUriRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuerIssuedoc1XmlPost(pushUriRequest?: PushUriRequest, options?: any): AxiosPromise<PushUriResponse> {
            return localVarFp.issuerIssuedoc1XmlPost(pushUriRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DigiLockerCompatIssuerApi - object-oriented interface
 * @export
 * @class DigiLockerCompatIssuerApi
 * @extends {BaseAPI}
 */
export class DigiLockerCompatIssuerApi extends BaseAPI {
    /**
     * 
     * @summary Digilocker Compatible endpoint to Issue Documents.
     * @param {PushUriRequest} [pushUriRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DigiLockerCompatIssuerApi
     */
    public issuerIssuedoc1XmlPost(pushUriRequest?: PushUriRequest, options?: any) {
        return DigiLockerCompatIssuerApiFp(this.configuration).issuerIssuedoc1XmlPost(pushUriRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

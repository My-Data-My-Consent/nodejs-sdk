/* tslint:disable */
/* eslint-disable */
/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateDataProcessingAgreement } from '../models';
// @ts-ignore
import { DataProcessingAgreement } from '../models';
// @ts-ignore
import { DataProcessingAgreementPaginatedList } from '../models';
// @ts-ignore
import { UpdateDataProcessingAgreement } from '../models';
/**
 * DataProcessingAgreementsApi - axios parameter creator
 * @export
 */
export const DataProcessingAgreementsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a data processing agreement.
         * @param {CreateDataProcessingAgreement} createDataProcessingAgreement Create data processing agreement payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDataProcessingAgreement: async (createDataProcessingAgreement: CreateDataProcessingAgreement, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createDataProcessingAgreement' is not null or undefined
            assertParamExists('createDataProcessingAgreement', 'createDataProcessingAgreement', createDataProcessingAgreement)
            const localVarPath = `/v1/data-agreements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDataProcessingAgreement, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
         * @param {string} id Agreement id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataProcessingAgreementById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDataProcessingAgreementById', 'id', id)
            const localVarPath = `/v1/data-agreements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get data processing agreement by id.
         * @param {string} id Agreement id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataProcessingAgreementById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDataProcessingAgreementById', 'id', id)
            const localVarPath = `/v1/data-agreements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paginated data processing agreements.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataProcessingAgreements: async (pageNo?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/data-agreements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Terminate a data processing agreement.
         * @param {string} id Agreement id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateDataProcessingAgreementById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('terminateDataProcessingAgreementById', 'id', id)
            const localVarPath = `/v1/data-agreements/{id}/terminate`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update a data processing agreement.
         * @param {string} id Agreement id.
         * @param {UpdateDataProcessingAgreement} updateDataProcessingAgreement Update data processing agreement payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataProcessingAgreement: async (id: string, updateDataProcessingAgreement: UpdateDataProcessingAgreement, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDataProcessingAgreement', 'id', id)
            // verify required parameter 'updateDataProcessingAgreement' is not null or undefined
            assertParamExists('updateDataProcessingAgreement', 'updateDataProcessingAgreement', updateDataProcessingAgreement)
            const localVarPath = `/v1/data-agreements/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDataProcessingAgreement, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataProcessingAgreementsApi - functional programming interface
 * @export
 */
export const DataProcessingAgreementsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataProcessingAgreementsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a data processing agreement.
         * @param {CreateDataProcessingAgreement} createDataProcessingAgreement Create data processing agreement payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDataProcessingAgreement(createDataProcessingAgreement: CreateDataProcessingAgreement, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataProcessingAgreement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDataProcessingAgreement(createDataProcessingAgreement, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
         * @param {string} id Agreement id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDataProcessingAgreementById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDataProcessingAgreementById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get data processing agreement by id.
         * @param {string} id Agreement id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataProcessingAgreementById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataProcessingAgreement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataProcessingAgreementById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get paginated data processing agreements.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataProcessingAgreements(pageNo?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataProcessingAgreementPaginatedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataProcessingAgreements(pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Terminate a data processing agreement.
         * @param {string} id Agreement id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async terminateDataProcessingAgreementById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.terminateDataProcessingAgreementById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update a data processing agreement.
         * @param {string} id Agreement id.
         * @param {UpdateDataProcessingAgreement} updateDataProcessingAgreement Update data processing agreement payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDataProcessingAgreement(id: string, updateDataProcessingAgreement: UpdateDataProcessingAgreement, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataProcessingAgreement>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDataProcessingAgreement(id, updateDataProcessingAgreement, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataProcessingAgreementsApi - factory interface
 * @export
 */
export const DataProcessingAgreementsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataProcessingAgreementsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a data processing agreement.
         * @param {CreateDataProcessingAgreement} createDataProcessingAgreement Create data processing agreement payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDataProcessingAgreement(createDataProcessingAgreement: CreateDataProcessingAgreement, options?: any): AxiosPromise<DataProcessingAgreement> {
            return localVarFp.createDataProcessingAgreement(createDataProcessingAgreement, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
         * @param {string} id Agreement id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDataProcessingAgreementById(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDataProcessingAgreementById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get data processing agreement by id.
         * @param {string} id Agreement id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataProcessingAgreementById(id: string, options?: any): AxiosPromise<DataProcessingAgreement> {
            return localVarFp.getDataProcessingAgreementById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paginated data processing agreements.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataProcessingAgreements(pageNo?: number, pageSize?: number, options?: any): AxiosPromise<DataProcessingAgreementPaginatedList> {
            return localVarFp.getDataProcessingAgreements(pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Terminate a data processing agreement.
         * @param {string} id Agreement id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        terminateDataProcessingAgreementById(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.terminateDataProcessingAgreementById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update a data processing agreement.
         * @param {string} id Agreement id.
         * @param {UpdateDataProcessingAgreement} updateDataProcessingAgreement Update data processing agreement payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDataProcessingAgreement(id: string, updateDataProcessingAgreement: UpdateDataProcessingAgreement, options?: any): AxiosPromise<DataProcessingAgreement> {
            return localVarFp.updateDataProcessingAgreement(id, updateDataProcessingAgreement, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataProcessingAgreementsApi - object-oriented interface
 * @export
 * @class DataProcessingAgreementsApi
 * @extends {BaseAPI}
 */
export class DataProcessingAgreementsApi extends BaseAPI {
    /**
     * 
     * @summary Create a data processing agreement.
     * @param {CreateDataProcessingAgreement} createDataProcessingAgreement Create data processing agreement payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataProcessingAgreementsApi
     */
    public createDataProcessingAgreement(createDataProcessingAgreement: CreateDataProcessingAgreement, options?: any) {
        return DataProcessingAgreementsApiFp(this.configuration).createDataProcessingAgreement(createDataProcessingAgreement, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a data processing agreement. This will not delete a published or a agreement in use with consents.
     * @param {string} id Agreement id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataProcessingAgreementsApi
     */
    public deleteDataProcessingAgreementById(id: string, options?: any) {
        return DataProcessingAgreementsApiFp(this.configuration).deleteDataProcessingAgreementById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get data processing agreement by id.
     * @param {string} id Agreement id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataProcessingAgreementsApi
     */
    public getDataProcessingAgreementById(id: string, options?: any) {
        return DataProcessingAgreementsApiFp(this.configuration).getDataProcessingAgreementById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paginated data processing agreements.
     * @param {number} [pageNo] Page number.
     * @param {number} [pageSize] Number of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataProcessingAgreementsApi
     */
    public getDataProcessingAgreements(pageNo?: number, pageSize?: number, options?: any) {
        return DataProcessingAgreementsApiFp(this.configuration).getDataProcessingAgreements(pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Terminate a data processing agreement.
     * @param {string} id Agreement id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataProcessingAgreementsApi
     */
    public terminateDataProcessingAgreementById(id: string, options?: any) {
        return DataProcessingAgreementsApiFp(this.configuration).terminateDataProcessingAgreementById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update a data processing agreement.
     * @param {string} id Agreement id.
     * @param {UpdateDataProcessingAgreement} updateDataProcessingAgreement Update data processing agreement payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataProcessingAgreementsApi
     */
    public updateDataProcessingAgreement(id: string, updateDataProcessingAgreement: UpdateDataProcessingAgreement, options?: any) {
        return DataProcessingAgreementsApiFp(this.configuration).updateDataProcessingAgreement(id, updateDataProcessingAgreement, options).then((request) => request(this.axios, this.basePath));
    }
}

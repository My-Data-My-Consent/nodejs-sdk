/* tslint:disable */
/* eslint-disable */
/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DataProvider } from '../models';
// @ts-ignore
import { DataProviderPaginatedList } from '../models';
/**
 * DataProviderDiscoveryApi - axios parameter creator
 * @export
 */
export const DataProviderDiscoveryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get a Data Provider details by provider id.
         * @param {string} providerId Data provider id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataProviderById: async (providerId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'providerId' is not null or undefined
            assertParamExists('getDataProviderById', 'providerId', providerId)
            const localVarPath = `/v1/data-providers/{providerId}`
                .replace(`{${"providerId"}}`, encodeURIComponent(String(providerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Discover all data providers in My Data My Consent by country and filters.
         * @param {string} [accountType] Account type.
         * @param {string} [documentType] Document type.
         * @param {string} [organizationCategory] Organization category.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {string} [countryIso2Code] ISO2 Country code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataProviders: async (accountType?: string, documentType?: string, organizationCategory?: string, pageNo?: number, pageSize?: number, countryIso2Code?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/data-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accountType !== undefined) {
                localVarQueryParameter['accountType'] = accountType;
            }

            if (documentType !== undefined) {
                localVarQueryParameter['documentType'] = documentType;
            }

            if (organizationCategory !== undefined) {
                localVarQueryParameter['organizationCategory'] = organizationCategory;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (countryIso2Code !== undefined) {
                localVarQueryParameter['countryIso2Code'] = countryIso2Code;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataProviderDiscoveryApi - functional programming interface
 * @export
 */
export const DataProviderDiscoveryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataProviderDiscoveryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get a Data Provider details by provider id.
         * @param {string} providerId Data provider id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataProviderById(providerId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataProvider>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataProviderById(providerId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Discover all data providers in My Data My Consent by country and filters.
         * @param {string} [accountType] Account type.
         * @param {string} [documentType] Document type.
         * @param {string} [organizationCategory] Organization category.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {string} [countryIso2Code] ISO2 Country code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataProviders(accountType?: string, documentType?: string, organizationCategory?: string, pageNo?: number, pageSize?: number, countryIso2Code?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataProviderPaginatedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataProviders(accountType, documentType, organizationCategory, pageNo, pageSize, countryIso2Code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataProviderDiscoveryApi - factory interface
 * @export
 */
export const DataProviderDiscoveryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataProviderDiscoveryApiFp(configuration)
    return {
        /**
         * 
         * @summary Get a Data Provider details by provider id.
         * @param {string} providerId Data provider id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataProviderById(providerId: string, options?: any): AxiosPromise<DataProvider> {
            return localVarFp.getDataProviderById(providerId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Discover all data providers in My Data My Consent by country and filters.
         * @param {string} [accountType] Account type.
         * @param {string} [documentType] Document type.
         * @param {string} [organizationCategory] Organization category.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {string} [countryIso2Code] ISO2 Country code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataProviders(accountType?: string, documentType?: string, organizationCategory?: string, pageNo?: number, pageSize?: number, countryIso2Code?: string, options?: any): AxiosPromise<DataProviderPaginatedList> {
            return localVarFp.getDataProviders(accountType, documentType, organizationCategory, pageNo, pageSize, countryIso2Code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataProviderDiscoveryApi - object-oriented interface
 * @export
 * @class DataProviderDiscoveryApi
 * @extends {BaseAPI}
 */
export class DataProviderDiscoveryApi extends BaseAPI {
    /**
     * 
     * @summary Get a Data Provider details by provider id.
     * @param {string} providerId Data provider id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataProviderDiscoveryApi
     */
    public getDataProviderById(providerId: string, options?: any) {
        return DataProviderDiscoveryApiFp(this.configuration).getDataProviderById(providerId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Discover all data providers in My Data My Consent by country and filters.
     * @param {string} [accountType] Account type.
     * @param {string} [documentType] Document type.
     * @param {string} [organizationCategory] Organization category.
     * @param {number} [pageNo] Page number.
     * @param {number} [pageSize] Number of items to return.
     * @param {string} [countryIso2Code] ISO2 Country code.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataProviderDiscoveryApi
     */
    public getDataProviders(accountType?: string, documentType?: string, organizationCategory?: string, pageNo?: number, pageSize?: number, countryIso2Code?: string, options?: any) {
        return DataProviderDiscoveryApiFp(this.configuration).getDataProviders(accountType, documentType, organizationCategory, pageNo, pageSize, countryIso2Code, options).then((request) => request(this.axios, this.basePath));
    }
}

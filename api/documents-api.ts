/* tslint:disable */
/* eslint-disable */
/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { DocumentIssueRequest } from '../models';
// @ts-ignore
import { ProblemDetails } from '../models';
/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Issue a new document.
         * @param {DocumentIssueRequest} [documentIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueDocument: async (documentIssueRequest?: DocumentIssueRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/documents/issue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentIssueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get issued document.
         * @param {string} documentId Document id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DocumentsIssuedDocumentIdGet: async (documentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('v1DocumentsIssuedDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/v1/documents/issued/{documentId}`
                .replace(`{${"documentId"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get issued documents.
         * @param {string} [documentTypeId] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DocumentsIssuedGet: async (documentTypeId?: string, fromDateTime?: string, toDateTime?: string, pageSize?: number, pageNo?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/documents/issued`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (documentTypeId !== undefined) {
                localVarQueryParameter['documentTypeId'] = documentTypeId;
            }

            if (fromDateTime !== undefined) {
                localVarQueryParameter['fromDateTime'] = (fromDateTime as any instanceof Date) ?
                    (fromDateTime as any).toISOString() :
                    fromDateTime;
            }

            if (toDateTime !== undefined) {
                localVarQueryParameter['toDateTime'] = (toDateTime as any instanceof Date) ?
                    (toDateTime as any).toISOString() :
                    toDateTime;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get registered document types.
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DocumentsTypesGet: async (pageSize?: number, pageNo?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/documents/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Issue a new document.
         * @param {DocumentIssueRequest} [documentIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issueDocument(documentIssueRequest?: DocumentIssueRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issueDocument(documentIssueRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get issued document.
         * @param {string} documentId Document id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DocumentsIssuedDocumentIdGet(documentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DocumentsIssuedDocumentIdGet(documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get issued documents.
         * @param {string} [documentTypeId] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DocumentsIssuedGet(documentTypeId?: string, fromDateTime?: string, toDateTime?: string, pageSize?: number, pageNo?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageSize, pageNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get registered document types.
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1DocumentsTypesGet(pageSize?: number, pageNo?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1DocumentsTypesGet(pageSize, pageNo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Issue a new document.
         * @param {DocumentIssueRequest} [documentIssueRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issueDocument(documentIssueRequest?: DocumentIssueRequest, options?: any): AxiosPromise<boolean> {
            return localVarFp.issueDocument(documentIssueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get issued document.
         * @param {string} documentId Document id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DocumentsIssuedDocumentIdGet(documentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.v1DocumentsIssuedDocumentIdGet(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get issued documents.
         * @param {string} [documentTypeId] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DocumentsIssuedGet(documentTypeId?: string, fromDateTime?: string, toDateTime?: string, pageSize?: number, pageNo?: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1DocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageSize, pageNo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get registered document types.
         * @param {number} [pageSize] 
         * @param {number} [pageNo] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1DocumentsTypesGet(pageSize?: number, pageNo?: number, options?: any): AxiosPromise<void> {
            return localVarFp.v1DocumentsTypesGet(pageSize, pageNo, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI {
    /**
     * 
     * @summary Issue a new document.
     * @param {DocumentIssueRequest} [documentIssueRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public issueDocument(documentIssueRequest?: DocumentIssueRequest, options?: any) {
        return DocumentsApiFp(this.configuration).issueDocument(documentIssueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get issued document.
     * @param {string} documentId Document id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public v1DocumentsIssuedDocumentIdGet(documentId: string, options?: any) {
        return DocumentsApiFp(this.configuration).v1DocumentsIssuedDocumentIdGet(documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get issued documents.
     * @param {string} [documentTypeId] 
     * @param {string} [fromDateTime] 
     * @param {string} [toDateTime] 
     * @param {number} [pageSize] 
     * @param {number} [pageNo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public v1DocumentsIssuedGet(documentTypeId?: string, fromDateTime?: string, toDateTime?: string, pageSize?: number, pageNo?: number, options?: any) {
        return DocumentsApiFp(this.configuration).v1DocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageSize, pageNo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get registered document types.
     * @param {number} [pageSize] 
     * @param {number} [pageNo] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public v1DocumentsTypesGet(pageSize?: number, pageNo?: number, options?: any) {
        return DocumentsApiFp(this.configuration).v1DocumentsTypesGet(pageSize, pageNo, options).then((request) => request(this.axios, this.basePath));
    }
}

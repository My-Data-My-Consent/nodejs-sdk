/* tslint:disable */
/* eslint-disable */
/**
 * My Data My Consent - Developer API
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConsentDetails } from '../models';
// @ts-ignore
import { ConsentRequest } from '../models';
// @ts-ignore
import { ConsentedDocument } from '../models';
// @ts-ignore
import { CreateConsentRequest } from '../models';
// @ts-ignore
import { DataConsentStatus } from '../models';
// @ts-ignore
import { DocumentIssueRequest } from '../models';
// @ts-ignore
import { DocumentIssueRequestDetails } from '../models';
// @ts-ignore
import { FinancialAccount } from '../models';
// @ts-ignore
import { IssuedDocument } from '../models';
// @ts-ignore
import { OrganizationConsentRequestDetails } from '../models';
// @ts-ignore
import { OrganizationConsentRequestTemplateDetails } from '../models';
// @ts-ignore
import { PaginatedListOfConsentRequestTemplates } from '../models';
// @ts-ignore
import { PaginatedListOfConsents } from '../models';
// @ts-ignore
import { PaginatedListOfDocumentTypes } from '../models';
// @ts-ignore
import { PaginatedListOfFinancialAccountTransactions } from '../models';
// @ts-ignore
import { PaginatedListOfIssuedDocuments } from '../models';
// @ts-ignore
import { PaginatedListOfOrganizationConsentRequestDetailss } from '../models';
// @ts-ignore
import { UploadDocumentResponse } from '../models';
/**
 * OrganizationsApi - axios parameter creator
 * @export
 */
export const OrganizationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all consent requests sent to Organizations.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentRequestsGet: async (status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/organizations/consent-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:ConsentRequests:Read"], configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (fromDateTime !== undefined) {
                localVarQueryParameter['from_date_time'] = (fromDateTime as any instanceof Date) ?
                    (fromDateTime as any).toISOString() :
                    fromDateTime;
            }

            if (toDateTime !== undefined) {
                localVarQueryParameter['to_date_time'] = (toDateTime as any instanceof Date) ?
                    (toDateTime as any).toISOString() :
                    toDateTime;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create consent request for an Organization.
         * @param {CreateConsentRequest} createConsentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentRequestsPost: async (createConsentRequest: CreateConsentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createConsentRequest' is not null or undefined
            assertParamExists('v1OrganizationsConsentRequestsPost', 'createConsentRequest', createConsentRequest)
            const localVarPath = `/v1/organizations/consent-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:ConsentRequests:Request"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createConsentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel the  Organization data request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentRequestsRequestIdCancelPut: async (requestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('v1OrganizationsConsentRequestsRequestIdCancelPut', 'requestId', requestId)
            const localVarPath = `/v1/organizations/consent-requests/{request_id}/cancel`
                .replace(`{${"request_id"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:ConsentRequests:Cancel"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Organization data request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentRequestsRequestIdGet: async (requestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('v1OrganizationsConsentRequestsRequestIdGet', 'requestId', requestId)
            const localVarPath = `/v1/organizations/consent-requests/{request_id}`
                .replace(`{${"request_id"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:ConsentRequests:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the paginated list of organization consent templates.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentTemplatesGet: async (pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/organizations/consent-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:ConsentRequestTemplates:Read"], configuration)

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Organization consent template details by consent id.
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentTemplatesTemplateIdGet: async (templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('v1OrganizationsConsentTemplatesTemplateIdGet', 'templateId', templateId)
            const localVarPath = `/v1/organizations/consent-templates/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:ConsentRequestTemplates:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Organization consent document by document id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdDocumentsDocumentIdDownloadGet: async (consentId: string, documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdDocumentsDocumentIdDownloadGet', 'consentId', consentId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdDocumentsDocumentIdDownloadGet', 'documentId', documentId)
            const localVarPath = `/v1/organizations/consents/{consent_id}/documents/{document_id}/download`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Organization consent document based on document id and consent id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdDocumentsDocumentIdGet: async (consentId: string, documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdDocumentsDocumentIdGet', 'consentId', consentId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdDocumentsDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/v1/organizations/consents/{consent_id}/documents/{document_id}`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Organization consent document by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdDocumentsGet: async (consentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdDocumentsGet', 'consentId', consentId)
            const localVarPath = `/v1/organizations/consents/{consent_id}/documents`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get organization consented financial account details.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdGet: async (consentId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdGet', 'consentId', consentId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdGet', 'accountId', accountId)
            const localVarPath = `/v1/organizations/consents/{consent_id}/financial-accounts/{account_id}`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get organization consented financial account transactions.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet: async (consentId: string, accountId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet', 'consentId', consentId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet', 'accountId', accountId)
            const localVarPath = `/v1/organizations/consents/{consent_id}/financial-accounts/{account_id}/transactions`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Consents:Read"], configuration)

            if (fromDateTime !== undefined) {
                localVarQueryParameter['from_date_time'] = (fromDateTime as any instanceof Date) ?
                    (fromDateTime as any).toISOString() :
                    fromDateTime;
            }

            if (toDateTime !== undefined) {
                localVarQueryParameter['to_date_time'] = (toDateTime as any instanceof Date) ?
                    (toDateTime as any).toISOString() :
                    toDateTime;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all organization consented financial accounts.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdFinancialAccountsGet: async (consentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdFinancialAccountsGet', 'consentId', consentId)
            const localVarPath = `/v1/organizations/consents/{consent_id}/financial-accounts`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Organization consent request details by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdGet: async (consentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1OrganizationsConsentsConsentIdGet', 'consentId', consentId)
            const localVarPath = `/v1/organizations/consents/{consent_id}`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the paginated list of Organization consents.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsGet: async (status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/organizations/consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Consents:Read"], configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (fromDateTime !== undefined) {
                localVarQueryParameter['from_date_time'] = (fromDateTime as any instanceof Date) ?
                    (fromDateTime as any).toISOString() :
                    fromDateTime;
            }

            if (toDateTime !== undefined) {
                localVarQueryParameter['to_date_time'] = (toDateTime as any instanceof Date) ?
                    (toDateTime as any).toISOString() :
                    toDateTime;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issue a new document to an organization.
         * @param {DocumentIssueRequest} documentIssueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsDocumentsIssuePost: async (documentIssueRequest: DocumentIssueRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentIssueRequest' is not null or undefined
            assertParamExists('v1OrganizationsDocumentsIssuePost', 'documentIssueRequest', documentIssueRequest)
            const localVarPath = `/v1/organizations/documents/issue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Documents:Issue"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentIssueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a document for issuance request of Organization.
         * @param {string} issueRequestId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsDocumentsIssueUploadIssueRequestIdPost: async (issueRequestId: string, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueRequestId' is not null or undefined
            assertParamExists('v1OrganizationsDocumentsIssueUploadIssueRequestIdPost', 'issueRequestId', issueRequestId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('v1OrganizationsDocumentsIssueUploadIssueRequestIdPost', 'file', file)
            const localVarPath = `/v1/organizations/documents/issue/upload/{issue_request_id}`
                .replace(`{${"issue_request_id"}}`, encodeURIComponent(String(issueRequestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Documents:Issue"], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get issued document.
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsDocumentsIssuedDocumentIdGet: async (documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('v1OrganizationsDocumentsIssuedDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/v1/organizations/documents/issued/{document_id}`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Documents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paginated list of issued documents of given document type.
         * @param {string} documentTypeId 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsDocumentsIssuedGet: async (documentTypeId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('v1OrganizationsDocumentsIssuedGet', 'documentTypeId', documentTypeId)
            const localVarPath = `/v1/organizations/documents/issued`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:Documents:Read"], configuration)

            if (documentTypeId !== undefined) {
                localVarQueryParameter['document_type_id'] = documentTypeId;
            }

            if (fromDateTime !== undefined) {
                localVarQueryParameter['from_date_time'] = (fromDateTime as any instanceof Date) ?
                    (fromDateTime as any).toISOString() :
                    fromDateTime;
            }

            if (toDateTime !== undefined) {
                localVarQueryParameter['to_date_time'] = (toDateTime as any instanceof Date) ?
                    (toDateTime as any).toISOString() :
                    toDateTime;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paginated list of registered document types.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsDocumentsTypesGet: async (pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/organizations/documents/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Organizations:DocumentTypes:Read"], configuration)

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationsApi - functional programming interface
 * @export
 */
export const OrganizationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all consent requests sent to Organizations.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentRequestsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfOrganizationConsentRequestDetailss>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentRequestsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create consent request for an Organization.
         * @param {CreateConsentRequest} createConsentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentRequestsPost(createConsentRequest: CreateConsentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationConsentRequestDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentRequestsPost(createConsentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel the  Organization data request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentRequestsRequestIdCancelPut(requestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentRequestsRequestIdCancelPut(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Organization data request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentRequestsRequestIdGet(requestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentRequestsRequestIdGet(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the paginated list of organization consent templates.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentTemplatesGet(pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfConsentRequestTemplates>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentTemplatesGet(pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Organization consent template details by consent id.
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentTemplatesTemplateIdGet(templateId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationConsentRequestTemplateDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentTemplatesTemplateIdGet(templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Download Organization consent document by document id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId: string, documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Organization consent document based on document id and consent id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentsConsentIdDocumentsDocumentIdGet(consentId: string, documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentedDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentsConsentIdDocumentsDocumentIdGet(consentId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Organization consent document by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentsConsentIdDocumentsGet(consentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConsentedDocument>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentsConsentIdDocumentsGet(consentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get organization consented financial account details.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdGet(consentId: string, accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdGet(consentId, accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get organization consented financial account transactions.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId: string, accountId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfFinancialAccountTransactions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId, accountId, fromDateTime, toDateTime, pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all organization consented financial accounts.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentsConsentIdFinancialAccountsGet(consentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FinancialAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentsConsentIdFinancialAccountsGet(consentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Organization consent request details by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentsConsentIdGet(consentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentsConsentIdGet(consentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the paginated list of Organization consents.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsConsentsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfConsents>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsConsentsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issue a new document to an organization.
         * @param {DocumentIssueRequest} documentIssueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsDocumentsIssuePost(documentIssueRequest: DocumentIssueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentIssueRequestDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsDocumentsIssuePost(documentIssueRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload a document for issuance request of Organization.
         * @param {string} issueRequestId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsDocumentsIssueUploadIssueRequestIdPost(issueRequestId: string, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsDocumentsIssueUploadIssueRequestIdPost(issueRequestId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get issued document.
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsDocumentsIssuedDocumentIdGet(documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuedDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsDocumentsIssuedDocumentIdGet(documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get paginated list of issued documents of given document type.
         * @param {string} documentTypeId 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsDocumentsIssuedGet(documentTypeId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfIssuedDocuments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsDocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get paginated list of registered document types.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1OrganizationsDocumentsTypesGet(pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfDocumentTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1OrganizationsDocumentsTypesGet(pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationsApi - factory interface
 * @export
 */
export const OrganizationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all consent requests sent to Organizations.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentRequestsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfOrganizationConsentRequestDetailss> {
            return localVarFp.v1OrganizationsConsentRequestsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create consent request for an Organization.
         * @param {CreateConsentRequest} createConsentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentRequestsPost(createConsentRequest: CreateConsentRequest, options?: any): AxiosPromise<OrganizationConsentRequestDetails> {
            return localVarFp.v1OrganizationsConsentRequestsPost(createConsentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel the  Organization data request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentRequestsRequestIdCancelPut(requestId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.v1OrganizationsConsentRequestsRequestIdCancelPut(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Organization data request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentRequestsRequestIdGet(requestId: string, options?: any): AxiosPromise<ConsentRequest> {
            return localVarFp.v1OrganizationsConsentRequestsRequestIdGet(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the paginated list of organization consent templates.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentTemplatesGet(pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfConsentRequestTemplates> {
            return localVarFp.v1OrganizationsConsentTemplatesGet(pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Organization consent template details by consent id.
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentTemplatesTemplateIdGet(templateId: string, options?: any): AxiosPromise<OrganizationConsentRequestTemplateDetails> {
            return localVarFp.v1OrganizationsConsentTemplatesTemplateIdGet(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Organization consent document by document id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId: string, documentId: string, options?: any): AxiosPromise<File> {
            return localVarFp.v1OrganizationsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Organization consent document based on document id and consent id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdDocumentsDocumentIdGet(consentId: string, documentId: string, options?: any): AxiosPromise<ConsentedDocument> {
            return localVarFp.v1OrganizationsConsentsConsentIdDocumentsDocumentIdGet(consentId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Organization consent document by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdDocumentsGet(consentId: string, options?: any): AxiosPromise<Array<ConsentedDocument>> {
            return localVarFp.v1OrganizationsConsentsConsentIdDocumentsGet(consentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get organization consented financial account details.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdGet(consentId: string, accountId: string, options?: any): AxiosPromise<FinancialAccount> {
            return localVarFp.v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdGet(consentId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get organization consented financial account transactions.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId: string, accountId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfFinancialAccountTransactions> {
            return localVarFp.v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId, accountId, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all organization consented financial accounts.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdFinancialAccountsGet(consentId: string, options?: any): AxiosPromise<Array<FinancialAccount>> {
            return localVarFp.v1OrganizationsConsentsConsentIdFinancialAccountsGet(consentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Organization consent request details by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsConsentIdGet(consentId: string, options?: any): AxiosPromise<ConsentDetails> {
            return localVarFp.v1OrganizationsConsentsConsentIdGet(consentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the paginated list of Organization consents.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsConsentsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfConsents> {
            return localVarFp.v1OrganizationsConsentsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issue a new document to an organization.
         * @param {DocumentIssueRequest} documentIssueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsDocumentsIssuePost(documentIssueRequest: DocumentIssueRequest, options?: any): AxiosPromise<DocumentIssueRequestDetails> {
            return localVarFp.v1OrganizationsDocumentsIssuePost(documentIssueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a document for issuance request of Organization.
         * @param {string} issueRequestId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsDocumentsIssueUploadIssueRequestIdPost(issueRequestId: string, file: File, options?: any): AxiosPromise<UploadDocumentResponse> {
            return localVarFp.v1OrganizationsDocumentsIssueUploadIssueRequestIdPost(issueRequestId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get issued document.
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsDocumentsIssuedDocumentIdGet(documentId: string, options?: any): AxiosPromise<IssuedDocument> {
            return localVarFp.v1OrganizationsDocumentsIssuedDocumentIdGet(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paginated list of issued documents of given document type.
         * @param {string} documentTypeId 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsDocumentsIssuedGet(documentTypeId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfIssuedDocuments> {
            return localVarFp.v1OrganizationsDocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paginated list of registered document types.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1OrganizationsDocumentsTypesGet(pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfDocumentTypes> {
            return localVarFp.v1OrganizationsDocumentsTypesGet(pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationsApi - object-oriented interface
 * @export
 * @class OrganizationsApi
 * @extends {BaseAPI}
 */
export class OrganizationsApi extends BaseAPI {
    /**
     * 
     * @summary Get all consent requests sent to Organizations.
     * @param {DataConsentStatus} [status] 
     * @param {string} [fromDateTime] 
     * @param {string} [toDateTime] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentRequestsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentRequestsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create consent request for an Organization.
     * @param {CreateConsentRequest} createConsentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentRequestsPost(createConsentRequest: CreateConsentRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentRequestsPost(createConsentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel the  Organization data request by id.
     * @param {string} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentRequestsRequestIdCancelPut(requestId: string, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentRequestsRequestIdCancelPut(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Organization data request by id.
     * @param {string} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentRequestsRequestIdGet(requestId: string, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentRequestsRequestIdGet(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the paginated list of organization consent templates.
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentTemplatesGet(pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentTemplatesGet(pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Organization consent template details by consent id.
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentTemplatesTemplateIdGet(templateId: string, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentTemplatesTemplateIdGet(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Organization consent document by document id.
     * @param {string} consentId 
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId: string, documentId: string, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Organization consent document based on document id and consent id.
     * @param {string} consentId 
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentsConsentIdDocumentsDocumentIdGet(consentId: string, documentId: string, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentsConsentIdDocumentsDocumentIdGet(consentId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Organization consent document by consent id.
     * @param {string} consentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentsConsentIdDocumentsGet(consentId: string, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentsConsentIdDocumentsGet(consentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get organization consented financial account details.
     * @param {string} consentId 
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdGet(consentId: string, accountId: string, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdGet(consentId, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get organization consented financial account transactions.
     * @param {string} consentId 
     * @param {string} accountId 
     * @param {string} [fromDateTime] 
     * @param {string} [toDateTime] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId: string, accountId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId, accountId, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all organization consented financial accounts.
     * @param {string} consentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentsConsentIdFinancialAccountsGet(consentId: string, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentsConsentIdFinancialAccountsGet(consentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Organization consent request details by consent id.
     * @param {string} consentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentsConsentIdGet(consentId: string, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentsConsentIdGet(consentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the paginated list of Organization consents.
     * @param {DataConsentStatus} [status] 
     * @param {string} [fromDateTime] 
     * @param {string} [toDateTime] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsConsentsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsConsentsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issue a new document to an organization.
     * @param {DocumentIssueRequest} documentIssueRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsDocumentsIssuePost(documentIssueRequest: DocumentIssueRequest, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsDocumentsIssuePost(documentIssueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a document for issuance request of Organization.
     * @param {string} issueRequestId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsDocumentsIssueUploadIssueRequestIdPost(issueRequestId: string, file: File, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsDocumentsIssueUploadIssueRequestIdPost(issueRequestId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get issued document.
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsDocumentsIssuedDocumentIdGet(documentId: string, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsDocumentsIssuedDocumentIdGet(documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paginated list of issued documents of given document type.
     * @param {string} documentTypeId 
     * @param {string} [fromDateTime] 
     * @param {string} [toDateTime] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsDocumentsIssuedGet(documentTypeId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsDocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paginated list of registered document types.
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationsApi
     */
    public v1OrganizationsDocumentsTypesGet(pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return OrganizationsApiFp(this.configuration).v1OrganizationsDocumentsTypesGet(pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}

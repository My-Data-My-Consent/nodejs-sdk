/* tslint:disable */
/* eslint-disable */
/**
 * My Data My Consent - Developer API
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateIndividualDataConsentRequest } from '../models';
// @ts-ignore
import { CreateOrganizationDataConsentRequest } from '../models';
// @ts-ignore
import { DataConsentDetailsDto } from '../models';
// @ts-ignore
import { DataConsentStatus } from '../models';
// @ts-ignore
import { IndividualDataConsentRequestResponse } from '../models';
// @ts-ignore
import { OrganizationDataConsentInfoDtoPaginatedList } from '../models';
// @ts-ignore
import { OrganizationDataConsentRequestResponse } from '../models';
// @ts-ignore
import { UserDataConsentInfoDtoPaginatedList } from '../models';
/**
 * DataConsentRequestsApi - axios parameter creator
 * @export
 */
export const DataConsentRequestsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Cancel the individual data consent request based on Id.
         * @param {string} requestId Individual consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelIndividualDataConsentRequest: async (requestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('cancelIndividualDataConsentRequest', 'requestId', requestId)
            const localVarPath = `/v1/consent-requests/individual/{requestId}/cancel`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel the Organization data consent request based on Id.
         * @param {string} requestId Organization consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrganizationDataConsentRequest: async (requestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('cancelOrganizationDataConsentRequest', 'requestId', requestId)
            const localVarPath = `/v1/consent-requests/organization/{requestId}/cancel`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a individual data consent request.
         * @summary Create a individual data consent request.
         * @param {CreateIndividualDataConsentRequest} createIndividualDataConsentRequest The Individual data consent request payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndividualDataConsentRequest: async (createIndividualDataConsentRequest: CreateIndividualDataConsentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createIndividualDataConsentRequest' is not null or undefined
            assertParamExists('createIndividualDataConsentRequest', 'createIndividualDataConsentRequest', createIndividualDataConsentRequest)
            const localVarPath = `/v1/consent-requests/individual`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createIndividualDataConsentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a organization data consent request.
         * @summary Create a organization data consent request.
         * @param {CreateOrganizationDataConsentRequest} createOrganizationDataConsentRequest M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationDataConsentRequest: async (createOrganizationDataConsentRequest: CreateOrganizationDataConsentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createOrganizationDataConsentRequest' is not null or undefined
            assertParamExists('createOrganizationDataConsentRequest', 'createOrganizationDataConsentRequest', createOrganizationDataConsentRequest)
            const localVarPath = `/v1/consent-requests/organization`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createOrganizationDataConsentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Consent Requests sent to Individuals.
         * @param {DataConsentStatus} [status] Data consent status.
         * @param {string} [startDateTime] Start date time.
         * @param {string} [endDateTime] End date time.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConsentRequestsToIndividuals: async (status?: DataConsentStatus, startDateTime?: string, endDateTime?: string, pageNo?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/consent-requests/individuals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startDateTime !== undefined) {
                localVarQueryParameter['startDateTime'] = (startDateTime as any instanceof Date) ?
                    (startDateTime as any).toISOString() :
                    startDateTime;
            }

            if (endDateTime !== undefined) {
                localVarQueryParameter['endDateTime'] = (endDateTime as any instanceof Date) ?
                    (endDateTime as any).toISOString() :
                    endDateTime;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get All Consent Requests sent to Organizations.
         * @param {DataConsentStatus} [status] Data consent status.
         * @param {string} [startDateTime] Start date time.
         * @param {string} [endDateTime] End date time.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConsentRequestsToOrganizations: async (status?: DataConsentStatus, startDateTime?: string, endDateTime?: string, pageNo?: number, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/consent-requests/organizations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startDateTime !== undefined) {
                localVarQueryParameter['startDateTime'] = (startDateTime as any instanceof Date) ?
                    (startDateTime as any).toISOString() :
                    startDateTime;
            }

            if (endDateTime !== undefined) {
                localVarQueryParameter['endDateTime'] = (endDateTime as any instanceof Date) ?
                    (endDateTime as any).toISOString() :
                    endDateTime;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['pageNo'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a Consent Request by ID.
         * @param {string} requestId Individual consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualConsentRequestById: async (requestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('getIndividualConsentRequestById', 'requestId', requestId)
            const localVarPath = `/v1/consent-requests/individuals/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a OrganizationConsent Request by Id.
         * @param {string} requestId Organization consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationConsentRequestById: async (requestId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('getOrganizationConsentRequestById', 'requestId', requestId)
            const localVarPath = `/v1/consent-requests/organizations/{requestId}`
                .replace(`{${"requestId"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DataConsentRequestsApi - functional programming interface
 * @export
 */
export const DataConsentRequestsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DataConsentRequestsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Cancel the individual data consent request based on Id.
         * @param {string} requestId Individual consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelIndividualDataConsentRequest(requestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndividualDataConsentRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelIndividualDataConsentRequest(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel the Organization data consent request based on Id.
         * @param {string} requestId Organization consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelOrganizationDataConsentRequest(requestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDataConsentRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelOrganizationDataConsentRequest(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a individual data consent request.
         * @summary Create a individual data consent request.
         * @param {CreateIndividualDataConsentRequest} createIndividualDataConsentRequest The Individual data consent request payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIndividualDataConsentRequest(createIndividualDataConsentRequest: CreateIndividualDataConsentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndividualDataConsentRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIndividualDataConsentRequest(createIndividualDataConsentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a organization data consent request.
         * @summary Create a organization data consent request.
         * @param {CreateOrganizationDataConsentRequest} createOrganizationDataConsentRequest M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrganizationDataConsentRequest(createOrganizationDataConsentRequest: CreateOrganizationDataConsentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDataConsentRequestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrganizationDataConsentRequest(createOrganizationDataConsentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Consent Requests sent to Individuals.
         * @param {DataConsentStatus} [status] Data consent status.
         * @param {string} [startDateTime] Start date time.
         * @param {string} [endDateTime] End date time.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllConsentRequestsToIndividuals(status?: DataConsentStatus, startDateTime?: string, endDateTime?: string, pageNo?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDataConsentInfoDtoPaginatedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllConsentRequestsToIndividuals(status, startDateTime, endDateTime, pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get All Consent Requests sent to Organizations.
         * @param {DataConsentStatus} [status] Data consent status.
         * @param {string} [startDateTime] Start date time.
         * @param {string} [endDateTime] End date time.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllConsentRequestsToOrganizations(status?: DataConsentStatus, startDateTime?: string, endDateTime?: string, pageNo?: number, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationDataConsentInfoDtoPaginatedList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllConsentRequestsToOrganizations(status, startDateTime, endDateTime, pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a Consent Request by ID.
         * @param {string} requestId Individual consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndividualConsentRequestById(requestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataConsentDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndividualConsentRequestById(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a OrganizationConsent Request by Id.
         * @param {string} requestId Organization consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationConsentRequestById(requestId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataConsentDetailsDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationConsentRequestById(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DataConsentRequestsApi - factory interface
 * @export
 */
export const DataConsentRequestsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DataConsentRequestsApiFp(configuration)
    return {
        /**
         * 
         * @summary Cancel the individual data consent request based on Id.
         * @param {string} requestId Individual consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelIndividualDataConsentRequest(requestId: string, options?: any): AxiosPromise<IndividualDataConsentRequestResponse> {
            return localVarFp.cancelIndividualDataConsentRequest(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel the Organization data consent request based on Id.
         * @param {string} requestId Organization consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelOrganizationDataConsentRequest(requestId: string, options?: any): AxiosPromise<OrganizationDataConsentRequestResponse> {
            return localVarFp.cancelOrganizationDataConsentRequest(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a individual data consent request.
         * @summary Create a individual data consent request.
         * @param {CreateIndividualDataConsentRequest} createIndividualDataConsentRequest The Individual data consent request payload
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndividualDataConsentRequest(createIndividualDataConsentRequest: CreateIndividualDataConsentRequest, options?: any): AxiosPromise<IndividualDataConsentRequestResponse> {
            return localVarFp.createIndividualDataConsentRequest(createIndividualDataConsentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a organization data consent request.
         * @summary Create a organization data consent request.
         * @param {CreateOrganizationDataConsentRequest} createOrganizationDataConsentRequest M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrganizationDataConsentRequest(createOrganizationDataConsentRequest: CreateOrganizationDataConsentRequest, options?: any): AxiosPromise<OrganizationDataConsentRequestResponse> {
            return localVarFp.createOrganizationDataConsentRequest(createOrganizationDataConsentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Consent Requests sent to Individuals.
         * @param {DataConsentStatus} [status] Data consent status.
         * @param {string} [startDateTime] Start date time.
         * @param {string} [endDateTime] End date time.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConsentRequestsToIndividuals(status?: DataConsentStatus, startDateTime?: string, endDateTime?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<UserDataConsentInfoDtoPaginatedList> {
            return localVarFp.getAllConsentRequestsToIndividuals(status, startDateTime, endDateTime, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get All Consent Requests sent to Organizations.
         * @param {DataConsentStatus} [status] Data consent status.
         * @param {string} [startDateTime] Start date time.
         * @param {string} [endDateTime] End date time.
         * @param {number} [pageNo] Page number.
         * @param {number} [pageSize] Number of items to return.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllConsentRequestsToOrganizations(status?: DataConsentStatus, startDateTime?: string, endDateTime?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<OrganizationDataConsentInfoDtoPaginatedList> {
            return localVarFp.getAllConsentRequestsToOrganizations(status, startDateTime, endDateTime, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a Consent Request by ID.
         * @param {string} requestId Individual consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndividualConsentRequestById(requestId: string, options?: any): AxiosPromise<DataConsentDetailsDto> {
            return localVarFp.getIndividualConsentRequestById(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a OrganizationConsent Request by Id.
         * @param {string} requestId Organization consent request id.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationConsentRequestById(requestId: string, options?: any): AxiosPromise<DataConsentDetailsDto> {
            return localVarFp.getOrganizationConsentRequestById(requestId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DataConsentRequestsApi - object-oriented interface
 * @export
 * @class DataConsentRequestsApi
 * @extends {BaseAPI}
 */
export class DataConsentRequestsApi extends BaseAPI {
    /**
     * 
     * @summary Cancel the individual data consent request based on Id.
     * @param {string} requestId Individual consent request id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataConsentRequestsApi
     */
    public cancelIndividualDataConsentRequest(requestId: string, options?: any) {
        return DataConsentRequestsApiFp(this.configuration).cancelIndividualDataConsentRequest(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel the Organization data consent request based on Id.
     * @param {string} requestId Organization consent request id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataConsentRequestsApi
     */
    public cancelOrganizationDataConsentRequest(requestId: string, options?: any) {
        return DataConsentRequestsApiFp(this.configuration).cancelOrganizationDataConsentRequest(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a individual data consent request.
     * @summary Create a individual data consent request.
     * @param {CreateIndividualDataConsentRequest} createIndividualDataConsentRequest The Individual data consent request payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataConsentRequestsApi
     */
    public createIndividualDataConsentRequest(createIndividualDataConsentRequest: CreateIndividualDataConsentRequest, options?: any) {
        return DataConsentRequestsApiFp(this.configuration).createIndividualDataConsentRequest(createIndividualDataConsentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a organization data consent request.
     * @summary Create a organization data consent request.
     * @param {CreateOrganizationDataConsentRequest} createOrganizationDataConsentRequest M:MyDataMyConsent.DeveloperApi.Controllers.DataConsentRequestsController.CreateOrganizationDataConsentRequest(MyDataMyConsent.DeveloperApi.Models.CreateOrganizationDataConsentRequest).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataConsentRequestsApi
     */
    public createOrganizationDataConsentRequest(createOrganizationDataConsentRequest: CreateOrganizationDataConsentRequest, options?: any) {
        return DataConsentRequestsApiFp(this.configuration).createOrganizationDataConsentRequest(createOrganizationDataConsentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Consent Requests sent to Individuals.
     * @param {DataConsentStatus} [status] Data consent status.
     * @param {string} [startDateTime] Start date time.
     * @param {string} [endDateTime] End date time.
     * @param {number} [pageNo] Page number.
     * @param {number} [pageSize] Number of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataConsentRequestsApi
     */
    public getAllConsentRequestsToIndividuals(status?: DataConsentStatus, startDateTime?: string, endDateTime?: string, pageNo?: number, pageSize?: number, options?: any) {
        return DataConsentRequestsApiFp(this.configuration).getAllConsentRequestsToIndividuals(status, startDateTime, endDateTime, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get All Consent Requests sent to Organizations.
     * @param {DataConsentStatus} [status] Data consent status.
     * @param {string} [startDateTime] Start date time.
     * @param {string} [endDateTime] End date time.
     * @param {number} [pageNo] Page number.
     * @param {number} [pageSize] Number of items to return.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataConsentRequestsApi
     */
    public getAllConsentRequestsToOrganizations(status?: DataConsentStatus, startDateTime?: string, endDateTime?: string, pageNo?: number, pageSize?: number, options?: any) {
        return DataConsentRequestsApiFp(this.configuration).getAllConsentRequestsToOrganizations(status, startDateTime, endDateTime, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a Consent Request by ID.
     * @param {string} requestId Individual consent request id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataConsentRequestsApi
     */
    public getIndividualConsentRequestById(requestId: string, options?: any) {
        return DataConsentRequestsApiFp(this.configuration).getIndividualConsentRequestById(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a OrganizationConsent Request by Id.
     * @param {string} requestId Organization consent request id.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataConsentRequestsApi
     */
    public getOrganizationConsentRequestById(requestId: string, options?: any) {
        return DataConsentRequestsApiFp(this.configuration).getOrganizationConsentRequestById(requestId, options).then((request) => request(this.axios, this.basePath));
    }
}

/* tslint:disable */
/* eslint-disable */
/**
 * My Data My Consent - Developer API
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConsentDetails } from '../models';
// @ts-ignore
import { ConsentRequest } from '../models';
// @ts-ignore
import { ConsentedDocument } from '../models';
// @ts-ignore
import { CreateConsentRequest } from '../models';
// @ts-ignore
import { DataConsentStatus } from '../models';
// @ts-ignore
import { DocumentIssueRequest } from '../models';
// @ts-ignore
import { DocumentIssueRequestDetails } from '../models';
// @ts-ignore
import { FhirBundleany } from '../models';
// @ts-ignore
import { FinancialAccount } from '../models';
// @ts-ignore
import { IndividualConsentRequestDetails } from '../models';
// @ts-ignore
import { IndividualConsentRequestTemplateDetails } from '../models';
// @ts-ignore
import { IssuedDocument } from '../models';
// @ts-ignore
import { PaginatedListOfConsentRequestTemplates } from '../models';
// @ts-ignore
import { PaginatedListOfConsents } from '../models';
// @ts-ignore
import { PaginatedListOfDocumentTypes } from '../models';
// @ts-ignore
import { PaginatedListOfFinancialAccountTransactions } from '../models';
// @ts-ignore
import { PaginatedListOfIndividualConsentRequestDetailss } from '../models';
// @ts-ignore
import { PaginatedListOfIssuedDocuments } from '../models';
// @ts-ignore
import { PushUriRequest } from '../models';
// @ts-ignore
import { PushUriResponse } from '../models';
// @ts-ignore
import { UploadDocumentResponse } from '../models';
/**
 * IndividualsApi - axios parameter creator
 * @export
 */
export const IndividualsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Digilocker compatible endpoint to issue document.
         * @param {PushUriRequest} pushUriRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuerIssuedoc1XmlPost: async (pushUriRequest: PushUriRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pushUriRequest' is not null or undefined
            assertParamExists('issuerIssuedoc1XmlPost', 'pushUriRequest', pushUriRequest)
            const localVarPath = `/issuer/issuedoc/1/xml`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(pushUriRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all consent requests sent to Individuals.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentRequestsGet: async (status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/individuals/consent-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:ConsentRequests:Read"], configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (fromDateTime !== undefined) {
                localVarQueryParameter['from_date_time'] = (fromDateTime as any instanceof Date) ?
                    (fromDateTime as any).toISOString() :
                    fromDateTime;
            }

            if (toDateTime !== undefined) {
                localVarQueryParameter['to_date_time'] = (toDateTime as any instanceof Date) ?
                    (toDateTime as any).toISOString() :
                    toDateTime;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create individual consent request.
         * @param {CreateConsentRequest} createConsentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentRequestsPost: async (createConsentRequest: CreateConsentRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createConsentRequest' is not null or undefined
            assertParamExists('v1IndividualsConsentRequestsPost', 'createConsentRequest', createConsentRequest)
            const localVarPath = `/v1/individuals/consent-requests`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:ConsentRequests:Request"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createConsentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel the Individual data request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentRequestsRequestIdCancelPut: async (requestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('v1IndividualsConsentRequestsRequestIdCancelPut', 'requestId', requestId)
            const localVarPath = `/v1/individuals/consent-requests/{request_id}/cancel`
                .replace(`{${"request_id"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:ConsentRequests:Cancel"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Individual data consent request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentRequestsRequestIdGet: async (requestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            assertParamExists('v1IndividualsConsentRequestsRequestIdGet', 'requestId', requestId)
            const localVarPath = `/v1/individuals/consent-requests/{request_id}`
                .replace(`{${"request_id"}}`, encodeURIComponent(String(requestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:ConsentRequests:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the paginated list of individual consent templates.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentTemplatesGet: async (pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/individuals/consent-templates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:ConsentRequestTemplates:Read"], configuration)

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Individual consent template details by consent id.
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentTemplatesTemplateIdGet: async (templateId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'templateId' is not null or undefined
            assertParamExists('v1IndividualsConsentTemplatesTemplateIdGet', 'templateId', templateId)
            const localVarPath = `/v1/individuals/consent-templates/{template_id}`
                .replace(`{${"template_id"}}`, encodeURIComponent(String(templateId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:ConsentRequestTemplates:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Individual consented document by document id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet: async (consentId: string, documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet', 'consentId', consentId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet', 'documentId', documentId)
            const localVarPath = `/v1/individuals/consents/{consent_id}/documents/{document_id}/download`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Individual consented document by document id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdDocumentsDocumentIdGet: async (consentId: string, documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdDocumentsDocumentIdGet', 'consentId', consentId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdDocumentsDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/v1/individuals/consents/{consent_id}/documents/{document_id}`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Individual consented document by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdDocumentsGet: async (consentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdDocumentsGet', 'consentId', consentId)
            const localVarPath = `/v1/individuals/consents/{consent_id}/documents`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get individual consented financial account details.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet: async (consentId: string, accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet', 'consentId', consentId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet', 'accountId', accountId)
            const localVarPath = `/v1/individuals/consents/{consent_id}/financial-accounts/{account_id}`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get individual consented financial account transactions.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {string} [filters] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet: async (consentId: string, accountId: string, filters?: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet', 'consentId', consentId)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet', 'accountId', accountId)
            const localVarPath = `/v1/individuals/consents/{consent_id}/financial-accounts/{account_id}/transactions`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)))
                .replace(`{${"account_id"}}`, encodeURIComponent(String(accountId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Consents:Read"], configuration)

            if (filters !== undefined) {
                localVarQueryParameter['filters'] = filters;
            }

            if (fromDateTime !== undefined) {
                localVarQueryParameter['from_date_time'] = fromDateTime;
            }

            if (toDateTime !== undefined) {
                localVarQueryParameter['to_date_time'] = toDateTime;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all individual consented financial accounts.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdFinancialAccountsGet: async (consentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdFinancialAccountsGet', 'consentId', consentId)
            const localVarPath = `/v1/individuals/consents/{consent_id}/financial-accounts`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Individuals consent details by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdGet: async (consentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdGet', 'consentId', consentId)
            const localVarPath = `/v1/individuals/consents/{consent_id}`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Individual consented Health Records by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdHealthFhirBundleGet: async (consentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'consentId' is not null or undefined
            assertParamExists('v1IndividualsConsentsConsentIdHealthFhirBundleGet', 'consentId', consentId)
            const localVarPath = `/v1/individuals/consents/{consent_id}/health/fhir/bundle`
                .replace(`{${"consent_id"}}`, encodeURIComponent(String(consentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Consents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the paginated list of Individual consents.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsGet: async (status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/individuals/consents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Consents:Read"], configuration)

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (fromDateTime !== undefined) {
                localVarQueryParameter['from_date_time'] = (fromDateTime as any instanceof Date) ?
                    (fromDateTime as any).toISOString() :
                    fromDateTime;
            }

            if (toDateTime !== undefined) {
                localVarQueryParameter['to_date_time'] = (toDateTime as any instanceof Date) ?
                    (toDateTime as any).toISOString() :
                    toDateTime;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Upload a document for issuance request of individual.
         * @param {string} issueRequestId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsDocumentsIssueIssueRequestIdUploadPost: async (issueRequestId: string, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issueRequestId' is not null or undefined
            assertParamExists('v1IndividualsDocumentsIssueIssueRequestIdUploadPost', 'issueRequestId', issueRequestId)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('v1IndividualsDocumentsIssueIssueRequestIdUploadPost', 'file', file)
            const localVarPath = `/v1/individuals/documents/issue/{issue_request_id}/upload`
                .replace(`{${"issue_request_id"}}`, encodeURIComponent(String(issueRequestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Documents:Issue"], configuration)


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Issue a new document to an individual user.
         * @param {DocumentIssueRequest} documentIssueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsDocumentsIssuePost: async (documentIssueRequest: DocumentIssueRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentIssueRequest' is not null or undefined
            assertParamExists('v1IndividualsDocumentsIssuePost', 'documentIssueRequest', documentIssueRequest)
            const localVarPath = `/v1/individuals/documents/issue`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Documents:Issue"], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json; charset=utf-8';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(documentIssueRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get issued document.
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsDocumentsIssuedDocumentIdGet: async (documentId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('v1IndividualsDocumentsIssuedDocumentIdGet', 'documentId', documentId)
            const localVarPath = `/v1/individuals/documents/issued/{document_id}`
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Documents:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paginated list of issued documents of given document type.
         * @param {string} documentTypeId 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsDocumentsIssuedGet: async (documentTypeId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'documentTypeId' is not null or undefined
            assertParamExists('v1IndividualsDocumentsIssuedGet', 'documentTypeId', documentTypeId)
            const localVarPath = `/v1/individuals/documents/issued`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:Documents:Read"], configuration)

            if (documentTypeId !== undefined) {
                localVarQueryParameter['document_type_id'] = documentTypeId;
            }

            if (fromDateTime !== undefined) {
                localVarQueryParameter['from_date_time'] = (fromDateTime as any instanceof Date) ?
                    (fromDateTime as any).toISOString() :
                    fromDateTime;
            }

            if (toDateTime !== undefined) {
                localVarQueryParameter['to_date_time'] = (toDateTime as any instanceof Date) ?
                    (toDateTime as any).toISOString() :
                    toDateTime;
            }

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paginated list of registered document types.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsDocumentsTypesGet: async (pageNo?: number, pageSize?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/individuals/documents/types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["Individuals:DocumentTypes:Read"], configuration)

            if (pageNo !== undefined) {
                localVarQueryParameter['page_no'] = pageNo;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndividualsApi - functional programming interface
 * @export
 */
export const IndividualsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndividualsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Digilocker compatible endpoint to issue document.
         * @param {PushUriRequest} pushUriRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async issuerIssuedoc1XmlPost(pushUriRequest: PushUriRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PushUriResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.issuerIssuedoc1XmlPost(pushUriRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all consent requests sent to Individuals.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentRequestsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfIndividualConsentRequestDetailss>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentRequestsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create individual consent request.
         * @param {CreateConsentRequest} createConsentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentRequestsPost(createConsentRequest: CreateConsentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndividualConsentRequestDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentRequestsPost(createConsentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel the Individual data request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentRequestsRequestIdCancelPut(requestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentRequestsRequestIdCancelPut(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Individual data consent request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentRequestsRequestIdGet(requestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentRequest>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentRequestsRequestIdGet(requestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the paginated list of individual consent templates.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentTemplatesGet(pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfConsentRequestTemplates>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentTemplatesGet(pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Individual consent template details by consent id.
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentTemplatesTemplateIdGet(templateId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IndividualConsentRequestTemplateDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentTemplatesTemplateIdGet(templateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Download Individual consented document by document id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId: string, documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Individual consented document by document id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentsConsentIdDocumentsDocumentIdGet(consentId: string, documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentedDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentsConsentIdDocumentsDocumentIdGet(consentId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Individual consented document by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentsConsentIdDocumentsGet(consentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConsentedDocument>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentsConsentIdDocumentsGet(consentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get individual consented financial account details.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet(consentId: string, accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FinancialAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet(consentId, accountId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get individual consented financial account transactions.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {string} [filters] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId: string, accountId: string, filters?: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfFinancialAccountTransactions>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId, accountId, filters, fromDateTime, toDateTime, pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all individual consented financial accounts.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentsConsentIdFinancialAccountsGet(consentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FinancialAccount>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentsConsentIdFinancialAccountsGet(consentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Individuals consent details by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentsConsentIdGet(consentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConsentDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentsConsentIdGet(consentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Individual consented Health Records by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentsConsentIdHealthFhirBundleGet(consentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FhirBundleany>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentsConsentIdHealthFhirBundleGet(consentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get the paginated list of Individual consents.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsConsentsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfConsents>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsConsentsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Upload a document for issuance request of individual.
         * @param {string} issueRequestId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsDocumentsIssueIssueRequestIdUploadPost(issueRequestId: string, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UploadDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsDocumentsIssueIssueRequestIdUploadPost(issueRequestId, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Issue a new document to an individual user.
         * @param {DocumentIssueRequest} documentIssueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsDocumentsIssuePost(documentIssueRequest: DocumentIssueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentIssueRequestDetails>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsDocumentsIssuePost(documentIssueRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get issued document.
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsDocumentsIssuedDocumentIdGet(documentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuedDocument>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsDocumentsIssuedDocumentIdGet(documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get paginated list of issued documents of given document type.
         * @param {string} documentTypeId 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsDocumentsIssuedGet(documentTypeId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfIssuedDocuments>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsDocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get paginated list of registered document types.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1IndividualsDocumentsTypesGet(pageNo?: number, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedListOfDocumentTypes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1IndividualsDocumentsTypesGet(pageNo, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IndividualsApi - factory interface
 * @export
 */
export const IndividualsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndividualsApiFp(configuration)
    return {
        /**
         * 
         * @summary Digilocker compatible endpoint to issue document.
         * @param {PushUriRequest} pushUriRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        issuerIssuedoc1XmlPost(pushUriRequest: PushUriRequest, options?: any): AxiosPromise<PushUriResponse> {
            return localVarFp.issuerIssuedoc1XmlPost(pushUriRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all consent requests sent to Individuals.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentRequestsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfIndividualConsentRequestDetailss> {
            return localVarFp.v1IndividualsConsentRequestsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create individual consent request.
         * @param {CreateConsentRequest} createConsentRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentRequestsPost(createConsentRequest: CreateConsentRequest, options?: any): AxiosPromise<IndividualConsentRequestDetails> {
            return localVarFp.v1IndividualsConsentRequestsPost(createConsentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel the Individual data request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentRequestsRequestIdCancelPut(requestId: string, options?: any): AxiosPromise<boolean> {
            return localVarFp.v1IndividualsConsentRequestsRequestIdCancelPut(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Individual data consent request by id.
         * @param {string} requestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentRequestsRequestIdGet(requestId: string, options?: any): AxiosPromise<ConsentRequest> {
            return localVarFp.v1IndividualsConsentRequestsRequestIdGet(requestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the paginated list of individual consent templates.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentTemplatesGet(pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfConsentRequestTemplates> {
            return localVarFp.v1IndividualsConsentTemplatesGet(pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Individual consent template details by consent id.
         * @param {string} templateId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentTemplatesTemplateIdGet(templateId: string, options?: any): AxiosPromise<IndividualConsentRequestTemplateDetails> {
            return localVarFp.v1IndividualsConsentTemplatesTemplateIdGet(templateId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Individual consented document by document id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId: string, documentId: string, options?: any): AxiosPromise<File> {
            return localVarFp.v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Individual consented document by document id.
         * @param {string} consentId 
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdDocumentsDocumentIdGet(consentId: string, documentId: string, options?: any): AxiosPromise<ConsentedDocument> {
            return localVarFp.v1IndividualsConsentsConsentIdDocumentsDocumentIdGet(consentId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Individual consented document by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdDocumentsGet(consentId: string, options?: any): AxiosPromise<Array<ConsentedDocument>> {
            return localVarFp.v1IndividualsConsentsConsentIdDocumentsGet(consentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get individual consented financial account details.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet(consentId: string, accountId: string, options?: any): AxiosPromise<FinancialAccount> {
            return localVarFp.v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet(consentId, accountId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get individual consented financial account transactions.
         * @param {string} consentId 
         * @param {string} accountId 
         * @param {string} [filters] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId: string, accountId: string, filters?: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfFinancialAccountTransactions> {
            return localVarFp.v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId, accountId, filters, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all individual consented financial accounts.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdFinancialAccountsGet(consentId: string, options?: any): AxiosPromise<Array<FinancialAccount>> {
            return localVarFp.v1IndividualsConsentsConsentIdFinancialAccountsGet(consentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Individuals consent details by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdGet(consentId: string, options?: any): AxiosPromise<ConsentDetails> {
            return localVarFp.v1IndividualsConsentsConsentIdGet(consentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Individual consented Health Records by consent id.
         * @param {string} consentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsConsentIdHealthFhirBundleGet(consentId: string, options?: any): AxiosPromise<FhirBundleany> {
            return localVarFp.v1IndividualsConsentsConsentIdHealthFhirBundleGet(consentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the paginated list of Individual consents.
         * @param {DataConsentStatus} [status] 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsConsentsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfConsents> {
            return localVarFp.v1IndividualsConsentsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Upload a document for issuance request of individual.
         * @param {string} issueRequestId 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsDocumentsIssueIssueRequestIdUploadPost(issueRequestId: string, file: File, options?: any): AxiosPromise<UploadDocumentResponse> {
            return localVarFp.v1IndividualsDocumentsIssueIssueRequestIdUploadPost(issueRequestId, file, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Issue a new document to an individual user.
         * @param {DocumentIssueRequest} documentIssueRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsDocumentsIssuePost(documentIssueRequest: DocumentIssueRequest, options?: any): AxiosPromise<DocumentIssueRequestDetails> {
            return localVarFp.v1IndividualsDocumentsIssuePost(documentIssueRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get issued document.
         * @param {string} documentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsDocumentsIssuedDocumentIdGet(documentId: string, options?: any): AxiosPromise<IssuedDocument> {
            return localVarFp.v1IndividualsDocumentsIssuedDocumentIdGet(documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paginated list of issued documents of given document type.
         * @param {string} documentTypeId 
         * @param {string} [fromDateTime] 
         * @param {string} [toDateTime] 
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsDocumentsIssuedGet(documentTypeId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfIssuedDocuments> {
            return localVarFp.v1IndividualsDocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paginated list of registered document types.
         * @param {number} [pageNo] 
         * @param {number} [pageSize] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1IndividualsDocumentsTypesGet(pageNo?: number, pageSize?: number, options?: any): AxiosPromise<PaginatedListOfDocumentTypes> {
            return localVarFp.v1IndividualsDocumentsTypesGet(pageNo, pageSize, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * IndividualsApi - object-oriented interface
 * @export
 * @class IndividualsApi
 * @extends {BaseAPI}
 */
export class IndividualsApi extends BaseAPI {
    /**
     * 
     * @summary Digilocker compatible endpoint to issue document.
     * @param {PushUriRequest} pushUriRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public issuerIssuedoc1XmlPost(pushUriRequest: PushUriRequest, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).issuerIssuedoc1XmlPost(pushUriRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all consent requests sent to Individuals.
     * @param {DataConsentStatus} [status] 
     * @param {string} [fromDateTime] 
     * @param {string} [toDateTime] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentRequestsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentRequestsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create individual consent request.
     * @param {CreateConsentRequest} createConsentRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentRequestsPost(createConsentRequest: CreateConsentRequest, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentRequestsPost(createConsentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel the Individual data request by id.
     * @param {string} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentRequestsRequestIdCancelPut(requestId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentRequestsRequestIdCancelPut(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Individual data consent request by id.
     * @param {string} requestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentRequestsRequestIdGet(requestId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentRequestsRequestIdGet(requestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the paginated list of individual consent templates.
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentTemplatesGet(pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentTemplatesGet(pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Individual consent template details by consent id.
     * @param {string} templateId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentTemplatesTemplateIdGet(templateId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentTemplatesTemplateIdGet(templateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Individual consented document by document id.
     * @param {string} consentId 
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId: string, documentId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentsConsentIdDocumentsDocumentIdDownloadGet(consentId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Individual consented document by document id.
     * @param {string} consentId 
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentsConsentIdDocumentsDocumentIdGet(consentId: string, documentId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentsConsentIdDocumentsDocumentIdGet(consentId, documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Individual consented document by consent id.
     * @param {string} consentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentsConsentIdDocumentsGet(consentId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentsConsentIdDocumentsGet(consentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get individual consented financial account details.
     * @param {string} consentId 
     * @param {string} accountId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet(consentId: string, accountId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentsConsentIdFinancialAccountsAccountIdGet(consentId, accountId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get individual consented financial account transactions.
     * @param {string} consentId 
     * @param {string} accountId 
     * @param {string} [filters] 
     * @param {string} [fromDateTime] 
     * @param {string} [toDateTime] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId: string, accountId: string, filters?: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentsConsentIdFinancialAccountsAccountIdTransactionsGet(consentId, accountId, filters, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all individual consented financial accounts.
     * @param {string} consentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentsConsentIdFinancialAccountsGet(consentId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentsConsentIdFinancialAccountsGet(consentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Individuals consent details by consent id.
     * @param {string} consentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentsConsentIdGet(consentId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentsConsentIdGet(consentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Individual consented Health Records by consent id.
     * @param {string} consentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentsConsentIdHealthFhirBundleGet(consentId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentsConsentIdHealthFhirBundleGet(consentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the paginated list of Individual consents.
     * @param {DataConsentStatus} [status] 
     * @param {string} [fromDateTime] 
     * @param {string} [toDateTime] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsConsentsGet(status?: DataConsentStatus, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsConsentsGet(status, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Upload a document for issuance request of individual.
     * @param {string} issueRequestId 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsDocumentsIssueIssueRequestIdUploadPost(issueRequestId: string, file: File, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsDocumentsIssueIssueRequestIdUploadPost(issueRequestId, file, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Issue a new document to an individual user.
     * @param {DocumentIssueRequest} documentIssueRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsDocumentsIssuePost(documentIssueRequest: DocumentIssueRequest, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsDocumentsIssuePost(documentIssueRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get issued document.
     * @param {string} documentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsDocumentsIssuedDocumentIdGet(documentId: string, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsDocumentsIssuedDocumentIdGet(documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paginated list of issued documents of given document type.
     * @param {string} documentTypeId 
     * @param {string} [fromDateTime] 
     * @param {string} [toDateTime] 
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsDocumentsIssuedGet(documentTypeId: string, fromDateTime?: string, toDateTime?: string, pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsDocumentsIssuedGet(documentTypeId, fromDateTime, toDateTime, pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paginated list of registered document types.
     * @param {number} [pageNo] 
     * @param {number} [pageSize] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndividualsApi
     */
    public v1IndividualsDocumentsTypesGet(pageNo?: number, pageSize?: number, options?: AxiosRequestConfig) {
        return IndividualsApiFp(this.configuration).v1IndividualsDocumentsTypesGet(pageNo, pageSize, options).then((request) => request(this.axios, this.basePath));
    }
}

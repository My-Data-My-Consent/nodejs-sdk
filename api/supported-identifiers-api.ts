/* tslint:disable */
/* eslint-disable */
/**
 * My Data My Consent - Developer API
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { SupportedIdentifier } from '../models';
/**
 * SupportedIdentifiersApi - axios parameter creator
 * @export
 */
export const SupportedIdentifiersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all supported identifiers by country.
         * @param {string} countryIso2Code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SupportedIdentifiersCountryIso2CodeGet: async (countryIso2Code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'countryIso2Code' is not null or undefined
            assertParamExists('v1SupportedIdentifiersCountryIso2CodeGet', 'countryIso2Code', countryIso2Code)
            const localVarPath = `/v1/supported-identifiers/{country_iso2_code}`
                .replace(`{${"country_iso2_code"}}`, encodeURIComponent(String(countryIso2Code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ClientCredentials required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ClientCredentials", ["SupportedIdentifiers:Read"], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SupportedIdentifiersApi - functional programming interface
 * @export
 */
export const SupportedIdentifiersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SupportedIdentifiersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get all supported identifiers by country.
         * @param {string} countryIso2Code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1SupportedIdentifiersCountryIso2CodeGet(countryIso2Code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportedIdentifier>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1SupportedIdentifiersCountryIso2CodeGet(countryIso2Code, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SupportedIdentifiersApi - factory interface
 * @export
 */
export const SupportedIdentifiersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SupportedIdentifiersApiFp(configuration)
    return {
        /**
         * 
         * @summary Get all supported identifiers by country.
         * @param {string} countryIso2Code 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SupportedIdentifiersCountryIso2CodeGet(countryIso2Code: string, options?: any): AxiosPromise<SupportedIdentifier> {
            return localVarFp.v1SupportedIdentifiersCountryIso2CodeGet(countryIso2Code, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SupportedIdentifiersApi - object-oriented interface
 * @export
 * @class SupportedIdentifiersApi
 * @extends {BaseAPI}
 */
export class SupportedIdentifiersApi extends BaseAPI {
    /**
     * 
     * @summary Get all supported identifiers by country.
     * @param {string} countryIso2Code 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SupportedIdentifiersApi
     */
    public v1SupportedIdentifiersCountryIso2CodeGet(countryIso2Code: string, options?: AxiosRequestConfig) {
        return SupportedIdentifiersApiFp(this.configuration).v1SupportedIdentifiersCountryIso2CodeGet(countryIso2Code, options).then((request) => request(this.axios, this.basePath));
    }
}
